#version 330 core

// Input vertex data, different for all executions of this shader.
layout(location = 0) in vec3 vertexPosition_modelspace;
layout(location = 1) in uint flags;

out vec3 particelColor;

// Values that stay constant for the whole mesh.
uniform mat4 MVP;

// Values that stay constant for the whole mesh.
uniform mat4 M;
uniform mat4 V;
uniform vec3 LightPosition_cameraspace;

void main()
{

	// Output position of the vertex, in clip space : MVP * position
	gl_Position = MVP * vec4(vertexPosition_modelspace,1);
    
    vec3 position_cameraspace = (V * M * vec4(vertexPosition_modelspace,0)).xyz;
    //light = clamp(position_cameraspace.x, 0, 1);
    float light = clamp(0.5 + 0.5 * dot(position_cameraspace, LightPosition_cameraspace) / length(LightPosition_cameraspace), 0.05, 1);
    vec3 hue;
    if ((flags & 2U) != 0U) {
        hue = vec3(1.4, 1.4, 1.0);
    } else {
        hue = vec3(0.7, 0.7, 1.0);
    }
    particelColor = hue * light;
}
